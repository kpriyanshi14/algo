SA
Data Structures
Algorithms
Array
Strings
Linked List
Stack
Queue
Tree
Graph
Searching
Sorting
Recursion
Dynamic Programming
Binary Tree
Binary Search Tree
Heap
Hashing
Divide & Conquer
Mathematical
Geometric
Bitwise
Greedy
Backtracking
Branch and Bound
Matrix
Pattern Searching
Randomized

▲
Related Articles
Write an Interview Experience
Dynamic Programming
Optimal Substructure Property in Dynamic Programming | DP-2
Overlapping Subproblems Property in Dynamic Programming | DP-1
How to solve a Dynamic Programming Problem ?
Tabulation vs Memoization
Bitmasking and Dynamic Programming | Set 1 (Count ways to assign unique cap to every person)
Digit DP | Introduction
Basic problem of Dynamic programming
Intermediate problems of Dynamic programming
Floyd Warshall Algorithm | DP-16
0/1 Knapsack Problem
Egg Dropping Puzzle | DP-11
Box Stacking Problem | DP-22
Partition problem | DP-18
Travelling Salesman Problem using Dynamic Programming
Longest Palindromic Subsequence | DP-12
Longest alternating subsequence
Find all distinct subset (or subsequence) sums of an array
Weighted Job Scheduling
Number of paths with exactly k coins
Count number of ways to jump to reach end
Count number of ways to partition a set into k subsets
Maximum subarray sum in O(n) using prefix sum
Maximum number of trailing zeros in the product of the subsets of size k
Minimum number of deletions to make a string palindrome
Find if string is K-Palindrome or not | Set 1
Find the longest path in a matrix with given constraints
Find minimum sum such that one of every three consecutive elements is taken
Dynamic Programming | Wildcard Pattern Matching | Linear Time and Constant Space
Dynamic Programming | Building Bridges
Hard problems on Dynamic programming
0/1 Knapsack Problem

Read
Discuss(110+)
Courses
Practice
Video
What is the 0/1 Knapsack Problem?
We are given N items where each item has some weight and profit associated with it. We are also given a bag with capacity W, [i.e., the bag can hold at most W weight in it]. The target is to put the items into the bag such that the sum of profits associated with them is the maximum possible. 

Note: The constraint here is we can either put an item completely into the bag or cannot put it at all [It is not possible to put a part of an item into the bag].

Examples:
Input: N = 3, W = 4, profit[] = {1, 2, 3}, weight[] = {4, 5, 1}
Output: 3
Explanation: There are two items which have weight less than or equal to 4. If we select the item with weight 4, the possible profit is 1. And if we select the item with weight 1, the possible profit is 3. So the maximum possible profit is 3. Note that we cannot put both the items with weight 4 and 1 together as the capacity of the bag is 4.

Input: N = 3, W = 3, profit[] = {1, 2, 3}, weight[] = {4, 5, 6}
Output: 0

Recommended Problem
0 - 1 Knapsack Problem
Dynamic Programming
Algorithms
Flipkart
Morgan Stanley
+9 more
Solve Problem
Submission count: 3L
0/1 Knapsack Problem using recursion:
To solve the problem follow the below idea:

A simple solution is to consider all subsets of items and calculate the total weight and profit of all subsets. Consider the only subsets whose total weight is smaller than W. From all such subsets, pick the subset with maximum profit.

Optimal Substructure: To consider all subsets of items, there can be two cases for every item. 

Case 1: The item is included in the optimal subset.
Case 2: The item is not included in the optimal set.
Follow the below steps to solve the problem:

The maximum value obtained from ‘N’ items is the max of the following two values. 

Maximum value obtained by N-1 items and W weight (excluding nth item)
Value of nth item plus maximum value obtained by N-1 items and (W – weight of the Nth item) [including Nth item].
If the weight of the ‘Nth‘ item is greater than ‘W’, then the Nth item cannot be included and Case 1 is the only possibility.
Below is the implementation of the above approach: 

C
C++
/* A Naive recursive implementation of
 0-1 Knapsack problem */
#include <bits/stdc++.h>
using namespace std;
 
// A utility function that returns
// maximum of two integers
int max(int a, int b) { return (a > b) ? a : b; }
 
// Returns the maximum value that
// can be put in a knapsack of capacity W
int knapSack(int W, int wt[], int val[], int n)
{
 
    // Base Case
    if (n == 0 || W == 0)
        return 0;
 
    // If weight of the nth item is more
    // than Knapsack capacity W, then
    // this item cannot be included
    // in the optimal solution
    if (wt[n - 1] > W)
        return knapSack(W, wt, val, n - 1);
 
    // Return the maximum of two cases:
    // (1) nth item included
    // (2) not included
    else
        return max(
            val[n - 1]
                + knapSack(W - wt[n - 1], wt, val, n - 1),
            knapSack(W, wt, val, n - 1));
}
 
// Driver code
int main()
{
    int profit[] = { 60, 100, 120 };
    int weight[] = { 10, 20, 30 };
    int W = 50;
    int n = sizeof(profit) / sizeof(profit[0]);
    cout << knapSack(W, weight, profit, n);
    return 0;
}
 
// This code is contributed by rathbhupendra
Java
Python
C#
PHP
Javascript
Output
220
Time Complexity: O(2N)
Auxiliary Space: O(N), Stack space required for recursion

0/1 Knapsack Problem using memoization:
Note: It should be noted that the above function using recursion computes the same subproblems again and again. See the following recursion tree, K(1, 1) is being evaluated twice. 

In the following recursion tree, K() refers  to knapSack(). The two parameters indicated in the following recursion tree are n and W.
The recursion tree is for following sample inputs.
weight[] = {1, 1, 1}, W = 2, profit[] = {10, 20, 30}

                                                     K(3, 2)  
                                          /                         \ 
                                       /                             \               
                          K(2, 2)                                K(2, 1)
                     /               \                           /               \ 
                  /                   \                       /                   \
          K(1, 2)               K(1, 1)            K(1, 1)       K(1, 0)
           /     \                  /       \                /                  \
        /         \              /           \            /                      \
K(0, 2)  K(0, 1)  K(0, 1)  K(0, 0)  K(0, 1)          K(0, 0)

Recursion tree for Knapsack capacity 2 units and 3 items of 1 unit weight.

As there are repetitions of the same subproblem again and again we can implement the following idea to solve the problem.

If we get a subproblem the first time, we can solve this problem by creating a 2-D array that can store a particular state (n, w). Now if we come across the same state (n, w) again instead of calculating it in exponential complexity we can directly return its result stored in the table in constant time.

Below is the implementation of the above approach:

C++
// Here is the top-down approach of
// dynamic programming
#include <bits/stdc++.h>
using namespace std;
 
// Returns the value of maximum profit
int knapSackRec(int W, int wt[], int val[], int i, int** dp)
{
    // base condition
    if (i < 0)
        return 0;
    if (dp[i][W] != -1)
        return dp[i][W];
 
    if (wt[i] > W) {
 
        // Store the value of function call
        // stack in table before return
        dp[i][W] = knapSackRec(W, wt, val, i - 1, dp);
        return dp[i][W];
    }
    else {
        // Store value in a table before return
        dp[i][W] = max(val[i]
                           + knapSackRec(W - wt[i], wt, val,
                                         i - 1, dp),
                       knapSackRec(W, wt, val, i - 1, dp));
 
        // Return value of table after storing
        return dp[i][W];
    }
}
 
int knapSack(int W, int wt[], int val[], int n)
{
    // double pointer to declare the
    // table dynamically
    int** dp;
    dp = new int*[n];
 
    // loop to create the table dynamically
    for (int i = 0; i < n; i++)
        dp[i] = new int[W + 1];
 
    // loop to initially filled the
    // table with -1
    for (int i = 0; i < n; i++)
        for (int j = 0; j < W + 1; j++)
            dp[i][j] = -1;
    return knapSackRec(W, wt, val, n - 1, dp);
}
 
// Driver Code
int main()
{
    int profit[] = { 60, 100, 120 };
    int weight[] = { 10, 20, 30 };
    int W = 50;
    int n = sizeof(profit) / sizeof(profit[0]);
    cout << knapSack(W, weight, profit, n);
    return 0;
}
