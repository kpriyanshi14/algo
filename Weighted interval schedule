#include<iostream>
using namespace std;
// To find p(j).
int compute_pj(int start[], int finish[], int j)
{
 int p = 0;
for(int i = j-1; i > 0; i--)
{
 if( finish[i] <= start[j] )
 p++;
}
return p;
}
// To use the recursive formula: max(Wj + OPT(p(j)), OPT(j-1))
int compute_opt(int j, int start[], int finish[], int w[])
{
if(j == 0)
return 0;
90
else
 return max( w[j] + compute_opt( compute_pj(start, finish, j), start,
finish, w), compute_opt(j-1, start, finish, w));
}
int main()
{
/* List of jobs: (start_time, finish_time, weight).
 Eg:
 {0, 3, 3},
 {1, 4, 2},
 {0, 5, 4},
 {3, 6, 1},
 {4, 7, 2},
 {3, 9, 5}.
 */

int n, temp;
cout<<"\n Enter the total no of jobs: ";
cin>>n;
int start_time[n];
int finish_time[n];
int weight[n];
90
int p[n];
for(int i = 1; i <= n; i++)
{
cout<<"\n Enter details for Job "<<i<<":";
cout<<"\n Start time: ";
cin>>start_time[i];
cout<<" Finish time: ";
cin>>finish_time[i];
cout<<" Weight: ";
cin>>weight[i];
cout<<endl;
}
// Sorting jobs by their finish time.
for(int i = 1; i <= n; i++)
{
for(int j = 1; j <= n-i; j++)
{
 if( finish_time[j] > finish_time[j+1] )
 {
 temp = finish_time[j];
 finish_time[j] = finish_time[j+1];
90
 finish_time[j+1] = temp;

 temp = start_time[j];
 start_time[j] = start_time[j+1];
 start_time[j+1] = temp;

 temp = weight[j];
 weight[j] = weight[j+1];
 weight[j+1] = temp;
 }
}
}
cout<<"\n After Sorting:";
cout<<"\n Start Time: ";
for(int i = 1; i <= n; i++)
cout<<start_time[i]<<" ";
cout<<"\n Finish Time: ";
for(int i = 1; i <= n; i++)
cout<<finish_time[i]<<" ";
cout<<"\n Weight: ";
for(int i = 1; i <= n; i++)
cout<<weight[i]<<" ";
cout<<endl;
90
// Computing p(j).
for(int j = 1; j <= n; j++)
{
p[j] = compute_pj(start_time, finish_time, j);
}
cout<<"\n w(j): ";
for(int i = 1; i <= n; i++)
cout<<weight[i]<<" ";
cout<<"\n p(j): ";
for(int i = 1; i <= n; i++)
cout<<p[i]<<" ";
cout<<"\n Maximum profit is: "<<compute_opt(n, start_time,
finish_time, weight);
return 0;
}
